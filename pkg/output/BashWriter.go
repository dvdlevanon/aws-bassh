package output

import (
	"aws-bassh/pkg/model"
	_ "embed"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"text/template"
)

//go:embed bash-function-template.sh
var bashFunctionTemplate string

type bashFunction struct {
	FunctionName string
	MachineData  string
	AwsbasshExec string
	AwsProfile   string
	ForceBastion string
}

func WriteMachines(config model.GenerateConfig, machines map[string]model.Machine) {
	outputFile := openOutputFile(config)

	if outputFile == nil {
		return
	}

	defer outputFile.Close()

	writeFileHeader(outputFile)
	writeMachinesFunctions(config, machines, outputFile)
}

func openOutputFile(config model.GenerateConfig) *os.File {
	file, err := os.Create(config.OutputFile)

	if err != nil {
		log.Printf("Error openning file %v, %v", config.OutputFile, err)
		return nil
	}

	return file
}

func writeFileHeader(outputFile *os.File) {
	outputFile.WriteString("#!/bin/bash\n#\n")
	outputFile.WriteString("# Auto generated by " + os.Args[0] + "\n#\n\n")
}

func writeMachinesFunctions(config model.GenerateConfig, machines map[string]model.Machine, outputFile *os.File) {
	tmpl, err := parseBashFunctionTemplate()

	if err != nil {
		return
	}

	for _, machine := range machines {
		bashFunction := getMachineFunction(config, machine)

		if err := tmpl.Execute(outputFile, bashFunction); err != nil {
			log.Printf("Error executing template for %v %v", bashFunction, err)
		}
	}
}

func parseBashFunctionTemplate() (*template.Template, error) {
	tmpl, err := template.New("bash function").Parse(bashFunctionTemplate)

	if err != nil {
		log.Printf("Error parsing bash function template %v", err)
		return nil, err
	}

	return tmpl, nil
}

func getMachineFunction(config model.GenerateConfig, machine model.Machine) bashFunction {
	return bashFunction{
		FunctionName: normalizeMachineName(config.BashAliasPrefix + machine.Name),
		MachineData:  model.SerializeMachine(machine),
		AwsbasshExec: getAwsbasshPath(),
		AwsProfile:   config.AwsProfile,
		ForceBastion: getForceBastionParam(config),
	}
}

func normalizeMachineName(machineName string) string {
	reg, err := regexp.Compile("[^a-zA-Z_0-9]")

	if err != nil {
		log.Printf("Error compiling machine name normailizer regex %v", err)
		return machineName
	}

	return reg.ReplaceAllString(machineName, "_")
}

func getAwsbasshPath() string {
	path, err := filepath.Abs(os.Args[0])

	if err != nil {
		log.Printf("Error getting absolute path of %v", os.Args[0])
		return os.Args[0]
	}

	return path
}

func getForceBastionParam(config model.GenerateConfig) string {
	if config.ForceBastion {
		return "--force-bastion"
	}

	return ""
}
